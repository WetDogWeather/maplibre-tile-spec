#include <gtest/gtest.h>

#include <fastpfor.h>

#include <algorithm>
#include <cstdint>

// TODO: these test cases seem broken, and this test only works because some or all of the expected array is not
// actually compared.
namespace {
// clang-format off
const std::uint32_t uncompressed1[] = { 187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8,4 ,187114314, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 8, 8, 8, 4 };
const std::uint32_t uncompressed2[] = { 1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4,4 ,1871143144, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7984, 4, 4, 4, 4, 4, 4, 4, 4 };
const std::uint32_t uncompressed3[] = { -100u, -99u, -98u, -97u, -96u, -95u, -94u, -93u, -92u, -91u, -90u, -89u, -88u, -87u, -86u, -85u, -84u, -83u, -82u, -81u, -80u, -79u, -78u, -77u, -76u, -75u, -74u, -73u, -72u, -71u, -70u, -69u, -68u, -67u, -66u, -65u, -64u, -63u, -62u, -61u, -60u, -59u, -58u, -57u, -56u, -55u, -54u, -53u, -52u, -51u, -50u, -49u, -48u, -47u, -46u, -45u, -44u, -43u, -42u, -41u, -40u, -39u, -38u, -37u, -36u, -35u, -34u, -33u, -32u, -31u, -30u, -29u, -28u, -27u, -26u, -25u, -24u, -23u, -22u, -21u, -20u, -19u, -18u, -17u, -16u, -15u, -14u, -13u, -12u, -11u, -10u, -9u, -8u, -7u, -6u, -5u, -4u, -3u, -2u, -1u, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 };
const std::uint32_t uncompressed4[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

// Note: compressed data was generated using encodeFastPfor128, but outputting int[] rather than byte[]
const std::uint32_t compressed1[] = { 256, 41, 277094666, -1977546686u, 554189328, 138547362, -1575975903u, 277094664, -2078209502u, 554189328, 138547338, 1108386337, 277094664, -2078209886u, 554312208, 138547332, 1108380193, 279060744, -2078209982u, 554213904, 170004612, 1108378657, 277487880, -1574893502u, 554189328, 144838788, 571507745, 277094666, -1977546686u, 554189328, 138547362, -1575975903u, 277094664, -2078209502u, 554189328, 138547338, 1108386337, 277094664, -2078209886u, 554312208, 138547332, 1108380193, 16, 1838341, 1346119700, -1601406876u, -253966156u, 4194304, 13, -1923532518u, 1313254556, -1423498410u, -925527151u, 1692691145, 447902261, -1668458183u, 1447970476, -1851054301u, 1427, -2071426936u, -652458422u, -2004318072u, -2004318072u, -2003531640u, -2004318072u, 8685704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  };
const std::uint32_t compressed2[] = { 512, 49, 613566752, 153391681, 306783378, 546457892, 1092915785, -1844894574u, 605178148, 1226871369, -1841224558u, 613550372, 1227100745, -1840701294u, 613564708, 1227133449, -1840700398u, 613566752, 153391681, 306783378, 546457892, 1092915785, -1844894574u, 605178148, 1226871369, -1841224558u, 613550372, 1227100745, -1840701294u, 613564708, 1227133449, -1840700398u, 613566752, 153391681, 306783378, 546457892, 1092915785, -1844894574u, 605178148, 1226871369, -1841224558u, 613550372, 1227100745, -1840701294u, 613564708, 1227133449, -1840700398u, 613566752, 153391681, 306783378, 58, 2038275, 673125387, 1346845747, 2020566107, -1600680829u, -926960469u, -253240109u, 521798651, 588779268, 1262499628, 1936219988, -1685026948u, -1011306588u, -337586228u, 65524, 134217728, 52, 1844505629, 486539326, 1047392492, -333643776u, 4091376, -252961536u, 15981, 1844505629, 486539326, 1047392492, -333643776u, 4091376, -252961536u, 15981, 1844505629, 486539326, 1047392492, -333643776u, 4091376, -252961536u, 15981, 1844505629, 486539326, 1047392492, -333643776u, 4091376, -252961536u, 15981, 1844505629, 486539326, 1047392492, -333643776u, 4091376, -252961536u, 15981, 1844505629, 486539326, 1047392492, -333643776u, 4091376, -252961536u, 15981, 1844505629, 486539326, 1047392492, 0, -2071690108u, -2071690108u, 2082292072, -2071690106u, -2071690108u, 813991044, -2071690050u, -2071690108u, 490825860, -2071689604u, -2071690108u, -2071690108u, -2071675344u, -2071690108u, 1097368708, -2071561187u, -2071690108u, -2071690108u, -2067910524u, -2071690108u, 1753515140, -2038686399u, -2071690108u, -2071690108u, -1104116604u, -2071690108u, -2071690108u, 2082292072, -2071690106u, -2071690108u, 813991044, -2071690050u, -2071690108u, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
const std::uint32_t compressed3[] = { 0, 2139062044, 2139037071, 2132709247, 529497983, -1887469697u, 2139062048, 2139038095, 2132971391, 596606847, -1887469697u, 2139062052, 2139039119, 2133233535, 663715711, -1887469697u, 2139062056, 2139040143, 2133495679, 730824575, -1887469697u, 2139062060, 2139041167, 2133757823, 797933439, -1887469697u, 2139062064, 2139042191, 2134019967, 865042303, -1887469697u, 2139062068, 2139043215, 2134282111, 932151167, -1887469697u, 2139062072, 2139044239, 2134544255, 999260031, -1887469697u, 2139062076, 2139045263, 2134806399, 1066368895, -1887469697u, 2139062080, 2139046287, 2135068543, 1133477759, -1887469697u, 2139062084, 2139047311, 2135330687, 1200586623, -1887469697u, 2139062088, 2139048335, 2135592831, 1267695487, -1887469697u, 2139062092, 2139049359, 2135854975, 1334804351, -1887469697u, 2139062096, 2139050383, 2136117119, 1401913215, -1887469697u, 2139062100, 2139051407, 2136379263, 1469022079, -1887469697u, 2139062104, 2139052431, 2136641407, 1536130943, -1887469697u, 2139062108, 2139053455, 2136903551, 1603239807, -1887469697u, 2139062112, 2139054479, 2137165695, 1670348671, -1887469697u, 2139062116, 2139055503, 2137427839, 1737457535, -1887469697u, 2139062120, 2139056527, 2137689983, 1804566399, -1887469697u, 2139062124, 2139057551, 2137952127, 1871675263, -1887469697u, 2139062128, 2139058575, 2138214271, 1938784127, -1887469697u, 2139062132, 2139059599, 2138476415, 2005892991, -1887469697u, 2139062136, 2139060623, 2138738559, 2073001855, -1887469697u, 2139062140, 2139061647, 2139000703, 2140110719, -1887469697u, -2088599168u, -2021227132u, -1953855096u, -1886483060u, -1819111024u, -1751738988u, -1684366952u, -1616994916u, -1549622880u, -1482250844u, -1414878808u, -1347506772u, -1280134736u, -1212762700u, -1145390664u, -1078018628u, -1010646592u, -943274556u, -875902520u, -808530484u, -741158448u, -673786412u, -606414376u, -539042340u, -471670304u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
const std::uint32_t compressed4[] = { 0, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, -2139062144u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
// clang-format on

void testFastPforDecompress(const std::vector<std::uint32_t>& input, const std::vector<std::uint32_t>& expected) {
    FastPForLib::FastPFor<8> core;
    const auto actual = core.uncompress(input, expected.size());
    EXPECT_LE(actual.size(), expected.size());
    EXPECT_TRUE(std::equal(actual.begin(), actual.end(), expected.begin(), std::next(expected.begin(), actual.size())));
}
} // namespace

TEST(PFOR, Decompress) {
    testFastPforDecompress({std::begin(compressed1), std::end(compressed1)},
                           {std::begin(uncompressed1), std::end(uncompressed1)});
    testFastPforDecompress({std::begin(compressed2), std::end(compressed2)},
                           {std::begin(uncompressed2), std::end(uncompressed2)});
    testFastPforDecompress({std::begin(compressed3), std::end(compressed3)},
                           {std::begin(uncompressed3), std::end(uncompressed3)});
    testFastPforDecompress({std::begin(compressed4), std::end(compressed4)},
                           {std::begin(uncompressed4), std::end(uncompressed4)});
}
