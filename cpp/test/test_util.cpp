#include <gtest/gtest.h>

#include <mlt/util/vectorized.hpp>

TEST(Util, ComponentwiseDeltaVec2) {
    // input, expected output
    const std::vector<std::pair<std::vector<std::int32_t>, std::vector<std::int32_t>>> componentwiseDeltaVec2Cases{
        {{10, 14, 3, 9}, {5, 7, 3, 2}},
        {{6, 12, 10, 12, 24, 44}, {3, 6, 8, 12, 20, 34}},
        {{0, 0, 8192, 0, 0, 8192, 8191, 0}, {0, 0, 4096, 0, 4096, 4096, 0, 4096}},
        {{
             1416, 520, 1888, 6448, 2927, 1136, 224, 47,   5920, 4671, 752,  351,  1999, 1423,
             447,  671, 1184, 1792, 143,  351,  623, 320,  95,   1055, 976,  880,  1407, 1471,
             3983, 336, 703,  80,   1680, 559,  15,  1120, 1279, 848,  1312, 1280, 1055, 528,
             511,  976, 1072, 175,  1072, 1423, 976, 352,  463,  416,  2527, 2896, 2192, 1167,
         },
         {
             708,  260,  1652, 3484, 188,  4052, 300,  4028, 3260, 1692, 3636, 1516, 2636, 804,
             2412, 468,  3004, 1364, 2932, 1188, 2620, 1348, 2572, 820,  3060, 1260, 2356, 524,
             364,  692,  12,   732,  852,  452,  844,  1012, 204,  1436, 860,  2076, 332,  2340,
             76,   2828, 612,  2740, 1148, 2028, 1636, 2204, 1404, 2412, 140,  3860, 1236, 3276,
         }},
        {{
             558, 7970, 72, 13, 3766, 6579, 100,  34,   8,  90,   134,  78,   92, 33, 76, 0,  28, 25, 84,  22,
             52,  13,   12, 41, 80,   9,    50,   34,   44, 1,    2,    79,   50, 21, 28, 47, 30, 17, 4,   25,
             58,  53,   90, 7,  48,   14,   96,   19,   18, 20,   118,  11,   46, 49, 12, 71, 16, 11, 711, 1277,
             15,  32,   15, 8,  13,   34,   13,   4,    25, 26,   17,   2,    1,  8,  8,  12, 5,  8,  5,   1,
             0,   16,   9,  2,  0,    14,   7,    4,    0,  6,    5,    6,    0,  4,  9,  1,  9,  10, 14,  0,
             0,   4,    7,  6,  9,    3,    3,    8,    17, 11,   1,    4,    11, 3,  1,  10, 19, 12, 3,   3,
             2,   3,    15, 3,  0,    8,    19,   2,    25, 32,   18,   8,    0,  8,  37, 3,  9,  8,  5,   18,
             19,  0,    5,  6,  3,    18,   13,   0,    0,  20,   7,    0,    7,  9,  13, 6,  11, 7,  9,   2,
             0,   12,   7,  6,  17,   2,    45,   28,   19, 26,   10,   14,   7,  4,  11, 5,  19, 8,  13,  11,
             11,  20,   23, 20, 13,   4,    13,   32,   37, 16,   17,   24,   23, 18, 5,  12, 33, 26, 13,  20,
             4,   36,   49, 38, 17,   46,   1390, 1536, 15, 1679, 2447, 7360,
         },
         {
             279,  3985, 315,  3978, 2198, 688, 2248, 705, 2252, 750,  2319, 789, 2365, 772,  2403, 772, 2417, 759,
             2459, 770,  2485, 763,  2491, 742, 2531, 737, 2556, 754,  2578, 753, 2579, 713,  2604, 702, 2618, 678,
             2633, 669,  2635, 656,  2664, 629, 2709, 625, 2733, 632,  2781, 622, 2790, 632,  2849, 626, 2872, 601,
             2878, 565,  2886, 559,  2530, -80, 2522, -64, 2514, -60,  2507, -43, 2500, -41,  2487, -28, 2478, -27,
             2477, -23,  2481, -17,  2478, -13, 2475, -14, 2475, -6,   2470, -5,  2470, 2,    2466, 4,   2466, 7,
             2463, 10,   2463, 12,   2458, 11,  2453, 16,  2460, 16,   2460, 18,  2456, 21,   2451, 19,  2449, 23,
             2440, 17,   2439, 19,   2433, 17,  2432, 22,  2422, 28,   2420, 26,  2421, 24,   2413, 22,  2413, 26,
             2403, 27,   2390, 43,   2399, 47,  2399, 51,  2380, 49,   2375, 53,  2372, 62,   2362, 62,  2359, 65,
             2357, 74,   2350, 74,   2350, 84,  2346, 84,  2342, 79,   2335, 82,  2329, 78,   2324, 79,  2324, 85,
             2320, 88,   2311, 89,   2288, 103, 2278, 116, 2283, 123,  2279, 125, 2273, 122,  2263, 126, 2256, 120,
             2250, 130,  2238, 140,  2231, 142, 2224, 158, 2205, 166,  2196, 178, 2184, 187,  2181, 193, 2164, 206,
             2157, 216,  2159, 234,  2134, 253, 2125, 276, 2820, 1044, 2812, 204, 1588, 3884,
         }}};

    using namespace mlt::util::decoding::vectorized;
    for (std::size_t i = 0; i < componentwiseDeltaVec2Cases.size(); ++i) {
        const auto& [input, expected] = componentwiseDeltaVec2Cases[i];
        auto output = input;
        decodeComponentwiseDeltaVec2(output.data(), output.size());
        EXPECT_EQ(output, expected);
    }
}
